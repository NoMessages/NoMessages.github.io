<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>SpringMVC 学习心得（七）</title>
      <link href="/2020/06/14/springmvc-7/"/>
      <url>/2020/06/14/springmvc-7/</url>
      
        <content type="html"><![CDATA[<p><strong>小编一路学习过来整理了文件上传的演化过程，随着框架的使用，使得文件上传的过程越来越简化方便，也正是因为框架的帮助，使得开发更加的简洁，下面小编整理了整个文件上传的变化过程！</strong></p><h2 id="1-、普通文件上传"><a href="#1-、普通文件上传" class="headerlink" title="1)、普通文件上传"></a>1)、普通文件上传</h2><h5 id="1-普通文件上传代码如下"><a href="#1-普通文件上传代码如下" class="headerlink" title="1.普通文件上传代码如下"></a><strong>1.普通文件上传代码如下</strong></h5><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testFileUp"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testFileUp</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">// 获取原生真实路径</span>        String realPath <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/uploads/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建文件 ， 判断是否存在此文件夹</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">boolean</span> mkdirs <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"isCreating? "</span><span class="token operator">+</span>mkdirs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token comment" spellcheck="true">//打印文件地址便于查看</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"file exitst ..."</span> <span class="token operator">+</span> realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//配置DiskFile工厂</span>        DiskFileItemFactory factory <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">DiskFileItemFactory</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//使用Servlet</span>        ServletFileUpload fileUpload <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ServletFileUpload</span><span class="token punctuation">(</span>factory<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//解析request</span>        List<span class="token operator">&lt;</span>FileItem<span class="token operator">></span> items <span class="token operator">=</span>  fileUpload<span class="token punctuation">.</span><span class="token function">parseRequest</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//判断文件是什么类型的</span>        <span class="token keyword">for</span> <span class="token punctuation">(</span>FileItem item <span class="token operator">:</span> items<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">isFormField</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                <span class="token comment" spellcheck="true">//普通类型</span>                String name <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getFieldName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>name<span class="token punctuation">.</span><span class="token function">equals</span><span class="token punctuation">(</span><span class="token string">"name"</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>                    <span class="token comment" spellcheck="true">//输出表单字段的值</span>                    System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span>item<span class="token punctuation">.</span><span class="token function">getString</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"上传了文件。"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span> <span class="token keyword">else</span> <span class="token punctuation">{</span>                System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"文件字段"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//文件类型</span>                <span class="token comment" spellcheck="true">//1.获取文件名字</span>                String name <span class="token operator">=</span> item<span class="token punctuation">.</span><span class="token function">getName</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//添加一个随机值与文件名拼串</span>                String s <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//拼串</span>                name <span class="token operator">=</span> s<span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span>name<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//上传文件</span>                item<span class="token punctuation">.</span><span class="token function">write</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>realPath<span class="token punctuation">,</span> name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//删除零食文件</span>                item<span class="token punctuation">.</span><span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token punctuation">}</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h2 id="2-、SpringMVC文件上传"><a href="#2-、SpringMVC文件上传" class="headerlink" title="2)、SpringMVC文件上传"></a>2)、SpringMVC文件上传</h2><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testFileUp2"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testFileUp2</span><span class="token punctuation">(</span>HttpServletRequest request<span class="token punctuation">,</span> MultipartFile filename<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//原生实现文件上传</span>        <span class="token comment" spellcheck="true">// 获取原生真实路径</span>        String realPath <span class="token operator">=</span> request<span class="token punctuation">.</span><span class="token function">getSession</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getServletContext</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">getRealPath</span><span class="token punctuation">(</span><span class="token string">"/uploads/"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建文件 ， 判断是否存在此文件夹</span>        File file <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">if</span><span class="token punctuation">(</span><span class="token operator">!</span>file<span class="token punctuation">.</span><span class="token function">exists</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">{</span>            <span class="token keyword">boolean</span> mkdirs <span class="token operator">=</span> file<span class="token punctuation">.</span><span class="token function">mkdirs</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"isCreating?"</span><span class="token operator">+</span>mkdirs<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"file exitst ..."</span> <span class="token operator">+</span> realPath<span class="token punctuation">)</span><span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//获取到上传文件的名称 == item.getFileName()</span>                String name <span class="token operator">=</span> filename<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                String s <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>                name <span class="token operator">=</span> s<span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span>name<span class="token punctuation">;</span>                <span class="token comment" spellcheck="true">//上传文件</span>            filename<span class="token punctuation">.</span><span class="token function">transferTo</span><span class="token punctuation">(</span><span class="token keyword">new</span> <span class="token class-name">File</span><span class="token punctuation">(</span>realPath<span class="token punctuation">,</span>name<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><ul><li>补充：SpringMVC提供了了<strong>MultipartFile</strong>对象，该对象表示上传的文件，要求变量名称必须和表单<strong>file</strong>标签的<strong>name</strong>属性名称相同</li><li><strong>可以通过配置配置文件的方式限制文件上传限制（ID必须为multipartResolver）</strong></li></ul><pre class=" language-java"><code class="language-java"> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置文件管理器 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"multipartResolver"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.web.multipart.commons.CommonsMultipartResolver"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"maxUploadSize"</span> value<span class="token operator">=</span><span class="token string">"#{1024 * 10 * 100}"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><h2 id="3-、跨服务器文件上传"><a href="#3-、跨服务器文件上传" class="headerlink" title="3)、跨服务器文件上传"></a>3)、跨服务器文件上传</h2><h4 id="1-文件上传逻辑图"><a href="#1-文件上传逻辑图" class="headerlink" title="1).文件上传逻辑图"></a>1).文件上传逻辑图</h4><p><img src="https://img-blog.csdnimg.cn/20200528112838469.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQwOTk5NA==,size_16,color_FFFFFF,t_70" alt></p><h4 id="2-导入jersey坐标，用来实现跨服务器上传"><a href="#2-导入jersey坐标，用来实现跨服务器上传" class="headerlink" title="2).导入jersey坐标，用来实现跨服务器上传"></a>2).导入jersey坐标，用来实现跨服务器上传</h4><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jersey<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>jersey<span class="token operator">-</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.18</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>sun<span class="token punctuation">.</span>jersey<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>jersey<span class="token operator">-</span>client<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">1.18</span><span class="token punctuation">.</span><span class="token number">1</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>     <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><h4 id="3-跨服务器代码实现"><a href="#3-跨服务器代码实现" class="headerlink" title="3).跨服务器代码实现"></a>3).跨服务器代码实现</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testFileUp3"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testFileUp3</span><span class="token punctuation">(</span> MultipartFile upload<span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception <span class="token punctuation">{</span>        <span class="token comment" spellcheck="true">//自定义路径</span>        String path <span class="token operator">=</span> <span class="token string">"http://localhost:9090/uploads/"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//获取文件名</span>        String name <span class="token operator">=</span> upload<span class="token punctuation">.</span><span class="token function">getOriginalFilename</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String s <span class="token operator">=</span> UUID<span class="token punctuation">.</span><span class="token function">randomUUID</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toString</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">replaceAll</span><span class="token punctuation">(</span><span class="token string">"-"</span><span class="token punctuation">,</span> <span class="token string">""</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">toUpperCase</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        name <span class="token operator">=</span> s<span class="token operator">+</span><span class="token string">"_"</span><span class="token operator">+</span>name<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//创建客户端对象 </span>       Client client <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Client</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//com.sun.jersey.api.client.Client; 注意是jerse包下的Client</span>        <span class="token comment" spellcheck="true">//连接图片服务器</span>        WebResource webResource <span class="token operator">=</span> client<span class="token punctuation">.</span><span class="token function">resource</span><span class="token punctuation">(</span>path <span class="token operator">+</span> name<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//因为path后面加了 ‘/ ’ 所以这里直接拼接就行了 </span>        <span class="token comment" spellcheck="true">//上传文件</span>        webResource<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span>upload<span class="token punctuation">.</span><span class="token function">getBytes</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//提交字节上传文件</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="4-可能会出现的异常"><a href="#4-可能会出现的异常" class="headerlink" title="4).可能会出现的异常"></a>4).可能会出现的异常</h4><p><strong>1）、403：return a response status of 403 Forbidden</strong><br><img src="https://img-blog.csdnimg.cn/20200528121950122.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQwOTk5NA==,size_16,color_FFFFFF,t_70" alt><br><strong>原因：在tomcat中，是由于”写入”访问被禁止而造成的，当试图将文件上载到目录或在目录中修改文件，但该目录不允许”写”访问时就会出现此种错误。</strong></p><p><strong>解决：修改为可接受传入即可，即将value改为false</strong><br><img src="https://img-blog.csdnimg.cn/20200528123412403.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQwOTk5NA==,size_16,color_FFFFFF,t_70" alt></p><p><strong>2）、500：org.springframework.web.multipart.MaxUploadsSizeExceedException</strong><br><img src="https://img-blog.csdnimg.cn/20200528122156221.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQwOTk5NA==,size_16,color_FFFFFF,t_70" alt><br><strong>原因：小编之前定义的最大上传文件大小字节为1024*1000所以只有1024000个字节大小，但是图片的大小为1314599个字节大小，所以上传就没有成功，所以这个异常修改上传最大字节即可</strong></p><p><strong>解决：修改最大值即可</strong><br><img src="https://img-blog.csdnimg.cn/20200528123530209.png" alt></p><h4 id="5-最终效果图"><a href="#5-最终效果图" class="headerlink" title="5).最终效果图"></a>5).最终效果图</h4><p><img src="https://img-blog.csdnimg.cn/20200528125629862.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQwOTk5NA==,size_16,color_FFFFFF,t_70" alt><br><strong>上传成功！</strong><br><img src="https://img-blog.csdnimg.cn/20200528125703584.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQwOTk5NA==,size_16,color_FFFFFF,t_70" alt></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC 学习心得（六）</title>
      <link href="/2020/06/14/springmvc-6/"/>
      <url>/2020/06/14/springmvc-6/</url>
      
        <content type="html"><![CDATA[<h2 id="1-、静态资源拦截问题"><a href="#1-、静态资源拦截问题" class="headerlink" title="1)、静态资源拦截问题"></a>1)、静态资源拦截问题</h2><blockquote><p>DispatcherServlet会拦截到所有的资源，导致一个问题就是静态资源（img、css、js）也会被拦截到，从而<br>不能被使用。解决问题就是需要配置静态资源不进行拦截，在springmvc.xml配置文件添加如下配置</p></blockquote><ol><li>mvc:resources标签配置不过滤<br> 1). location元素表示webapp目录下的包下的所有文件<br> 2). mapping元素表示以/static开头的所有请求路径，如/static/a 或者/static/a/b</li></ol><pre class=" language-xml"><code class="language-xml"> <span class="token comment" spellcheck="true">&lt;!-- 设置静态资源不过滤 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/css/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/css/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- 样式 --></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/images/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- 图片 --></span>     <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span><span class="token namespace">mvc:</span>resources</span> <span class="token attr-name">location</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/js/<span class="token punctuation">"</span></span> <span class="token attr-name">mapping</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>/js/**<span class="token punctuation">"</span></span><span class="token punctuation">/></span></span> <span class="token comment" spellcheck="true">&lt;!-- javascript --></span></code></pre><h2 id="2-、json转换为对象"><a href="#2-、json转换为对象" class="headerlink" title="2)、json转换为对象"></a>2)、json转换为对象</h2><p><strong>1).实体类User</strong></p><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">User</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> String username<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//姓名</span>    <span class="token keyword">private</span> String password<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//密码</span>    <span class="token keyword">private</span> Integer age<span class="token punctuation">;</span><span class="token comment" spellcheck="true">//年龄</span>    <span class="token punctuation">}</span></code></pre><p><strong>2).前端页面编写AJAX（原生阿贾克斯的实现）</strong></p><pre class=" language-markup"><code class="language-markup"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>script</span><span class="token punctuation">></span></span><span class="token script language-javascript">        <span class="token comment" spellcheck="true">/*  全局函数  */</span>        <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token function">$</span><span class="token punctuation">(</span><span class="token string">"#btn01"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">click</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">{</span>              $<span class="token punctuation">.</span><span class="token function">ajax</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                  url<span class="token punctuation">:</span><span class="token string">"test/testAjax"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true">//请求路径</span>                  contentType<span class="token punctuation">:</span><span class="token string">"application/json;charset=utf-8"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//设置编码请求格式</span>                  data<span class="token punctuation">:</span><span class="token string">'{"username":"哈哈","password":"123445","age":23}'</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//传入的数据</span>                  datatype<span class="token punctuation">:</span><span class="token string">"json"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//数据类型</span>                  type<span class="token punctuation">:</span><span class="token string">"post"</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//请求类型</span>                  success<span class="token punctuation">:</span><span class="token keyword">function</span> <span class="token punctuation">(</span>data<span class="token punctuation">)</span> <span class="token punctuation">{</span> <span class="token comment" spellcheck="true">//请求成功返回类型</span>                      <span class="token function">alert</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span>                  <span class="token punctuation">}</span>              <span class="token punctuation">}</span><span class="token punctuation">)</span>            <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    </span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>script</span><span class="token punctuation">></span></span></code></pre><p><strong>3).标注controller为回写数据（@ResponseBody）注解，如果不了解这些注解，小编给出传送门—–&gt;</strong>  <a href="https://blog.csdn.net/weixin_43409994/article/details/105900984" target="_blank" rel="noopener">SpringMVC 学习笔记心得（四）常用注解详解</a></p><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testAjax"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token annotation punctuation">@ResponseBody</span> User <span class="token function">testAjax</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> User user<span class="token punctuation">)</span> <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>user<span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"123123"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        user<span class="token punctuation">.</span><span class="token function">setAge</span><span class="token punctuation">(</span><span class="token number">29</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> user<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>4). json字符串和JavaBean对象互相转换的过程中，需要使用jackson的jar包</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>jackson<span class="token operator">-</span>databind<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.9</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>jackson<span class="token operator">-</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>    <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.9</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>dependency<span class="token operator">></span>  <span class="token operator">&lt;</span>groupId<span class="token operator">></span>com<span class="token punctuation">.</span>fasterxml<span class="token punctuation">.</span>jackson<span class="token punctuation">.</span>core<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>    <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>jackson<span class="token operator">-</span>annotations<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>     <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.9</span><span class="token punctuation">.</span><span class="token number">0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><p><strong>5).返回的data就被转换为对象了</strong><br><img src="https://img-blog.csdnimg.cn/20200527145707756.png" alt></p>]]></content>
      
      
      <categories>
          
          <category> SpringMVC </category>
          
          <category> Spring </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC 学习心得（五）</title>
      <link href="/2020/06/14/springmvc-5/"/>
      <url>/2020/06/14/springmvc-5/</url>
      
        <content type="html"><![CDATA[<p><strong>Springmvc中响应数据和结果视图的情况有很多，以下是小编总结的内容。</strong></p><h1 id="1-返回值分类"><a href="#1-返回值分类" class="headerlink" title="1.返回值分类"></a>1.返回值分类</h1><h4 id="1）、字符串"><a href="#1）、字符串" class="headerlink" title="1）、字符串"></a>1）、字符串</h4><pre class=" language-java"><code class="language-java">   <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">hello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>springmvc会通过走视图解析器的方式去跳转返回的’success’界面,视图解析器中，自己定义的前缀prefix 和后缀 subffix再和返回的’success’拼接起来，最终就会跳转到对应的/WEB-INF/pages/success.jsp</strong></p><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"internalResourceViewResolver"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"prefix"</span> value<span class="token operator">=</span><span class="token string">"/WEB-INF/pages/"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"suffix"</span> value<span class="token operator">=</span><span class="token string">".jsp"</span><span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><p><font color="red">这里需要注意的就是，如果自己在开发的过程中没有配置视图解析器，那么就会默认跳向根目录下的返回值（return “success”），这里当然会抛404，因为success是无法找到的，所以要在webapp下创建success.jsp文件并且，将返回值完善为（return “success.jsp”）才可以访问到</font></p><h4 id="2）、void"><a href="#2）、void" class="headerlink" title="2）、void"></a>2）、void</h4><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/success"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">index</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"index method ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>如果控制器的方法返回值编写成void，执行程序报404的异常，默认查找JSP页面没有找到。</strong><br><strong>1. 默认会跳转到@GetMapping(value=”/success”) success.jsp的页面（如果配置了视图解析器，没配置会抛500异常）如下图</strong><br><img src="https://img-blog.csdnimg.cn/20200527130626134.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQwOTk5NA==,size_16,color_FFFFFF,t_70" alt><br><strong>2. 可以使用请求转发或者重定向跳转到指定的页面</strong><br><strong>2.1 forward请求转发：</strong></p><pre class=" language-java"><code class="language-java"> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"重定向或者请求转发"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 请求转发</span>        request<span class="token punctuation">.</span><span class="token function">getRequestDispatcher</span><span class="token punctuation">(</span><span class="token string">"/WEB-INF/pages/forward.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">forward</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>2.2 redirect重定向：</strong></p><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// 重定向</span>        response<span class="token punctuation">.</span><span class="token function">sendRedirect</span><span class="token punctuation">(</span>request<span class="token punctuation">.</span><span class="token function">getContextPath</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"/redirect.jsp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setCharacterEncoding</span><span class="token punctuation">(</span><span class="token string">"UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        response<span class="token punctuation">.</span><span class="token function">setContentType</span><span class="token punctuation">(</span><span class="token string">"text/html;charset=UTF-8"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 直接响应数据</span>        response<span class="token punctuation">.</span><span class="token function">getWriter</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">print</span><span class="token punctuation">(</span><span class="token string">"你好"</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p><strong>转发和重定向需要注意的地方是，重定向是没有权限访问WEB-INF下的文件的，也可以说是WEB-INF下的文件受保护，无法被重定向到，所以如果是请求WEB-INF下的文件一定会报404（如下图所示，所以小伙伴们就不要过多去纠结这个问题了）</strong></p><p><img src="https://img-blog.csdnimg.cn/20200527131557303.png" alt></p><h4 id="3）、ModelAndView"><a href="#3）、ModelAndView" class="headerlink" title="3）、ModelAndView"></a>3）、ModelAndView</h4><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/model"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> ModelAndView <span class="token function">getView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        ModelAndView mv <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">ModelAndView</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// 跳转到list.jsp的页面</span>        mv<span class="token punctuation">.</span><span class="token function">setViewName</span><span class="token punctuation">(</span><span class="token string">"success"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> mv<span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>ModelAndView底层实现其实也是request的转发请求，他也有mv.addObject()方法，携带参数可以在此次转发请求中获取生效，mv.setViewName()方法也是会走视图解析器的,所以最终会去视图解析器配置的/Prefix+’设置的路径’+Subfix路径</strong></p><h1 id="2-SpringMVC框架提供的转发和重定向"><a href="#2-SpringMVC框架提供的转发和重定向" class="headerlink" title="2. SpringMVC框架提供的转发和重定向"></a>2. SpringMVC框架提供的转发和重定向</h1><h3 id="1-、forward请求转发"><a href="#1-、forward请求转发" class="headerlink" title="1)、forward请求转发"></a>1)、forward请求转发</h3><pre class=" language-java"><code class="language-java"> <span class="token comment" spellcheck="true">/* 使用forward关键字进行请求转发     *  forward:转发的JSP路径"，不走视图解析器了，所以需要编写完整的路径     *  @return     *  @throws Exception     */</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/test"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">delete</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token keyword">throws</span> Exception    <span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"test..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">// return "forward:/WEB-INF/pages/success.jsp";</span>        <span class="token keyword">return</span> <span class="token string">"forward:/forward/test.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h3 id="2-、redirect重定向"><a href="#2-、redirect重定向" class="headerlink" title="2)、redirect重定向"></a>2)、redirect重定向</h3><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@GetMapping</span><span class="token punctuation">(</span><span class="token string">"/guess"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">guess</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        <span class="token keyword">return</span> <span class="token string">"redirect:/forward/test.jsp"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>这里注意，转发和重定向都不会走视图解析器的，会直接在webapp下寻找forward文件夹下的test.jsp文件，但是请求转发（forward）是可以请求WEB-INF文件下的资源，而重定向（redirect）不能</strong></p><h3 id="3-、redirect和forward区别？"><a href="#3-、redirect和forward区别？" class="headerlink" title="3)、redirect和forward区别？"></a>3)、redirect和forward区别？</h3><p><strong>小编自己总结了一下：</strong></p><table><thead><tr><th>要素</th><th>forward</th><th>redirect</th></tr></thead><tbody><tr><td>请求次数</td><td>1次</td><td>2次</td></tr><tr><td>请求路径</td><td>无变化</td><td>重定向网址</td></tr><tr><td>数据共享</td><td>同一个request，可以共享数据</td><td>两次请求两个request，不能共享数据</td></tr><tr><td>请求写法</td><td>request.getRequestDispatcher(资源路径).forward(request, response)</td><td>response.sendRedirect(资源路径);</td></tr><tr><td>本质区别</td><td>转发是服务器行为</td><td>重定向是客户端行为</td></tr><tr><td>转向速度</td><td>较快</td><td>较慢</td></tr><tr><td>权限访问</td><td>可以访问WEB-INF文件夹下的文件</td><td>不可以访问WEB-INF文件夹下的文件</td></tr></tbody></table><p><strong>通过以后的学习，小编会不断的补充和完善，希望能够帮助到大家</strong></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC 学习心得(四)</title>
      <link href="/2020/06/14/springmvc-4/"/>
      <url>/2020/06/14/springmvc-4/</url>
      
        <content type="html"><![CDATA[<p><strong>在springmvc中，许多注解能够帮助我们大大提高开发效率，这里小编讲述一下最常见的七种注解</strong></p><h3 id="1-RequestParam注解"><a href="#1-RequestParam注解" class="headerlink" title="1. RequestParam注解"></a>1. RequestParam注解</h3><ol><li>作用：把请求中的指定名称的参数传递给控制器中的形参赋值</li><li>属性<ol><li>value：请求参数中的名称</li><li>required：请求参数中是否必须提供此参数，默认值是true，必须提供</li></ol></li></ol><h5 id="概念引导："><a href="#概念引导：" class="headerlink" title="概念引导："></a><strong>概念引导：</strong></h5><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">/* 接收请求  @return */</span> <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"/testParam"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> String <span class="token function">testParam</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestParam</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"username"</span><span class="token punctuation">,</span>required<span class="token operator">=</span><span class="token boolean">false</span><span class="token punctuation">)</span>String name<span class="token punctuation">)</span>  <span class="token punctuation">{</span>   System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>   <span class="token punctuation">}</span></code></pre><p><strong>注意：传值要与注解中的参数对应，否则将不会被自动封装上，则会变成null值，2.当添加了注解required=false，如果不参入参数也不会抛出400请求错误，如果不添加，默认需要传入参数，否则会报400错误</strong></p><hr><h3 id="2-RequestBody注解"><a href="#2-RequestBody注解" class="headerlink" title="2. RequestBody注解"></a>2. RequestBody注解</h3><ol><li>作用：用于获取请求体的内容（注意：get方法不可以）</li><li>属性<br>  required：是否必须有请求体，默认值是true</li></ol><h5 id="2-1-引导案例："><a href="#2-1-引导案例：" class="headerlink" title="2.1 引导案例："></a><strong>2.1 引导案例：</strong></h5><p>​      </p><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/testBody"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testBody</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestBody</span> String body<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testBody Method ... "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>body<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="2-2-表单内容如下："><a href="#2-2-表单内容如下：" class="headerlink" title="2.2 表单内容如下："></a><strong>2.2 表单内容如下：</strong></h5><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span> form action<span class="token operator">=</span><span class="token string">"/test/testBody"</span> method<span class="token operator">=</span><span class="token string">"post"</span><span class="token operator">></span>    姓名：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"username"</span> <span class="token operator">/</span><span class="token operator">></span>    密码：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"password"</span> <span class="token operator">/</span><span class="token operator">></span>    金额：<span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"text"</span> name<span class="token operator">=</span><span class="token string">"money"</span> <span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span>input type<span class="token operator">=</span><span class="token string">"submit"</span> value<span class="token operator">=</span><span class="token string">"提交"</span> <span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span> <span class="token operator">/</span>form<span class="token operator">></span></code></pre><h5 id="2-3-提交页面："><a href="#2-3-提交页面：" class="headerlink" title="2.3 提交页面："></a><strong>2.3 提交页面：</strong></h5><p><img src="https://img-blog.csdnimg.cn/20200503112627143.png" alt></p><blockquote><p>输出结果：<br>testBody Method …<br>username=%C3%A7%C2%BD%C2%97%C3%A4%C2%B8%C2%BD%C3%A4%C2%B8%C2%9D%C3%A5%C2%A1%C2%94&amp;password=1024&amp;money=200.5</p></blockquote><h5 id="2-4-注意：解决乱码的问题：在web-xml中配置"><a href="#2-4-注意：解决乱码的问题：在web-xml中配置" class="headerlink" title="2.4  注意：解决乱码的问题：在web.xml中配置"></a><strong>2.4  注意：解决乱码的问题：在web.xml中配置</strong></h5><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置过滤器  <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>filter<span class="token operator">></span>    <span class="token operator">&lt;</span>filter<span class="token operator">-</span>name<span class="token operator">></span>characterEncodingFilter<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>name<span class="token operator">></span>    <span class="token operator">&lt;</span>filter<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>CharacterEncodingFilter<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>    <span class="token operator">&lt;</span>init<span class="token operator">-</span>param<span class="token operator">></span>      <span class="token operator">&lt;</span>param<span class="token operator">-</span>name<span class="token operator">></span>encoding<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>name<span class="token operator">></span>      <span class="token operator">&lt;</span>param<span class="token operator">-</span>value<span class="token operator">></span>UTF<span class="token operator">-</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>value<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>init<span class="token operator">-</span>param<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">></span>  <span class="token operator">&lt;</span>filter<span class="token operator">-</span>mapping<span class="token operator">></span>    <span class="token operator">&lt;</span>filter<span class="token operator">-</span>name<span class="token operator">></span>characterEncodingFilter<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>name<span class="token operator">></span>    <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">></span><span class="token operator">/</span><span class="token operator">*</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">-</span>pattern<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>mapping<span class="token operator">></span></code></pre><blockquote><p>deploy服务器，输出结果：<br>testBody Method …<br>username=罗丽丝塔&amp;password=1024&amp;money=200.5</p></blockquote><h3 id="3-PathVariable注解"><a href="#3-PathVariable注解" class="headerlink" title="3.  PathVariable注解"></a>3.  PathVariable注解</h3><ol><li>作用：拥有绑定url中的占位符的。例如：url中有/delete/{id}，{id}就是占位符</li><li>属性<ol><li>value：指定url中的占位符名称</li></ol></li><li>Restful风格的URL<ol><li>请求路径一样，可以根据不同的请求方式去执行后台的不同方法</li><li>restful风格的URL优点<ol><li>结构清晰</li><li>符合标准</li><li>易于理解</li><li>扩展方便</li></ol></li></ol></li></ol><hr><h5 id="3-1-引导案例："><a href="#3-1-引导案例：" class="headerlink" title="3.1 引导案例："></a><strong>3.1 引导案例：</strong></h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testVaripoty/{id}"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testVaripoty</span><span class="token punctuation">(</span><span class="token annotation punctuation">@PathVariable</span><span class="token punctuation">(</span>name <span class="token operator">=</span> <span class="token string">"id"</span><span class="token punctuation">)</span> String id<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"testVaripoty Method ... "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>id<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="3-2-传值测试："><a href="#3-2-传值测试：" class="headerlink" title="3.2 传值测试："></a><strong>3.2 传值测试：</strong></h5><pre class=" language-vbnet"><code class="language-vbnet"><a href="testVaripoty/100">测试PathVariable</a></code></pre><h5 id="3-3-结果输出："><a href="#3-3-结果输出：" class="headerlink" title="3.3  结果输出："></a><strong>3.3  结果输出：</strong></h5><pre class=" language-handlebars"><code class="language-handlebars">testVaripoty Method ... 100</code></pre><p><strong>这里注意：这里的写法格式是/路径/{参数名},在传值的时候也是“路径/值”,在传参数的时候不要习惯性的把 ‘ / ’ 写成 ’？‘</strong></p><h3 id="4-RequestHeader注解"><a href="#4-RequestHeader注解" class="headerlink" title="4. RequestHeader注解"></a>4. RequestHeader注解</h3><ol><li>作用：获取指定请求头的值</li><li>属性<br>  value：请求头的名称</li></ol><h5 id="4-1-引导案例："><a href="#4-1-引导案例：" class="headerlink" title="4.1 引导案例："></a><strong>4.1 引导案例：</strong></h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"/testHeader"</span><span class="token punctuation">)</span>         <span class="token keyword">public</span> String <span class="token function">testHeader</span><span class="token punctuation">(</span><span class="token annotation punctuation">@RequestHeader</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"Accept"</span><span class="token punctuation">)</span> String header<span class="token punctuation">)</span> <span class="token punctuation">{</span>         System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>header<span class="token punctuation">)</span><span class="token punctuation">;</span>         <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>  <span class="token punctuation">}</span></code></pre><h3 id="5-CookieValue注解"><a href="#5-CookieValue注解" class="headerlink" title="5. CookieValue注解"></a>5. CookieValue注解</h3><ol><li>作用：用于获取指定cookie的名称的值</li><li>属性：value：cookie的名称</li></ol><h5 id="5-1-引导案例："><a href="#5-1-引导案例：" class="headerlink" title="5.1 引导案例："></a><strong>5.1 引导案例：</strong></h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path<span class="token operator">=</span><span class="token string">"/testCookie"</span><span class="token punctuation">)</span> <span class="token keyword">public</span> String <span class="token function">testCookie</span><span class="token punctuation">(</span><span class="token annotation punctuation">@CookieValue</span><span class="token punctuation">(</span>value<span class="token operator">=</span><span class="token string">"JSESSIONID"</span><span class="token punctuation">)</span> String cookieValue<span class="token punctuation">)</span> <span class="token punctuation">{</span> System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>cookieValue<span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span> <span class="token punctuation">}</span></code></pre><h5 id="5-2-注意：JSESSIONID是固定写法，在浏览器中可以看到的，这里写错了也是获取不到的"><a href="#5-2-注意：JSESSIONID是固定写法，在浏览器中可以看到的，这里写错了也是获取不到的" class="headerlink" title="5.2 注意：JSESSIONID是固定写法，在浏览器中可以看到的，这里写错了也是获取不到的"></a><strong>5.2 注意：JSESSIONID是固定写法，在浏览器中可以看到的，这里写错了也是获取不到的</strong></h5><h3 id="6-ModelAttribute注解"><a href="#6-ModelAttribute注解" class="headerlink" title="6. ModelAttribute注解"></a>6. ModelAttribute注解</h3><ol><li>作用<ol><li>出现在方法上：表示当前方法会在控制器方法执行前线执行。</li></ol></li><li>出现在参数上：获取指定的数据给参数赋值。</li><li>两种实现方式：@ModelAttribute中设置返回对象  ； 使用map集合  +  @ModelAttribute ( value = key) 的形式 完成</li></ol><h5 id="6-1-引导案例：（返回对象方式）"><a href="#6-1-引导案例：（返回对象方式）" class="headerlink" title="6.1 引导案例：（返回对象方式）"></a><strong>6.1 引导案例：（返回对象方式）</strong></h5><pre class=" language-java"><code class="language-java"> <span class="token annotation punctuation">@ModelAttribute</span>    <span class="token keyword">public</span> UserAccount <span class="token function">firModol</span><span class="token punctuation">(</span>String username<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"welcome ..."</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">//模拟查询数据库操作</span>        UserAccount userAccount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userAccount<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        userAccount<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"1234465"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> userAccount<span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testModolAttribute"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testModolAttribute</span><span class="token punctuation">(</span>UserAccount userAccount<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userAccount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="6-2-表单填写："><a href="#6-2-表单填写：" class="headerlink" title="6.2 表单填写："></a><strong>6.2 表单填写：</strong></h5><p><img src="https://img-blog.csdnimg.cn/20200503123500933.png" alt></p><blockquote><p>输出结果：<br>welcome …罗丽丝塔<br>UserAccount{username=’罗丽丝塔’, password=’33333’, money=null}</p></blockquote><p><strong>这里小编对为什么密码是33333做一个解释，@ModelAttribute表示最先被执行，小编在里面设置了密码，模拟查询数据库，但是此时小编提交的新的数据过来，于是将原来的数据覆盖了，就变成了表格中填写的数据，有点类似于修改个人资料的操作</strong></p><h5 id="6-3-引导案例（MAP-ModelAttribute）"><a href="#6-3-引导案例（MAP-ModelAttribute）" class="headerlink" title="6.3  引导案例（MAP+@ModelAttribute）"></a><strong>6.3  引导案例（MAP+@ModelAttribute）</strong></h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@ModelAttribute</span>    <span class="token keyword">public</span> <span class="token keyword">void</span> <span class="token function">firModol</span><span class="token punctuation">(</span>String username <span class="token punctuation">,</span> Map<span class="token operator">&lt;</span>String <span class="token punctuation">,</span> UserAccount<span class="token operator">></span> map<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"welcome ..."</span> <span class="token operator">+</span> username<span class="token punctuation">)</span><span class="token punctuation">;</span>        UserAccount userAccount <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">UserAccount</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        userAccount<span class="token punctuation">.</span><span class="token function">setUsername</span><span class="token punctuation">(</span>username<span class="token punctuation">)</span><span class="token punctuation">;</span>        userAccount<span class="token punctuation">.</span><span class="token function">setPassword</span><span class="token punctuation">(</span><span class="token string">"1234465"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        map<span class="token punctuation">.</span><span class="token function">put</span><span class="token punctuation">(</span><span class="token string">"userAccounts"</span><span class="token punctuation">,</span>userAccount<span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/testModolAttribute"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">testModolAttribute</span><span class="token punctuation">(</span><span class="token annotation punctuation">@ModelAttribute</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"userAccounts"</span><span class="token punctuation">)</span> UserAccount userAccount<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span>userAccount<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="6-4-form表单填写："><a href="#6-4-form表单填写：" class="headerlink" title="6.4  form表单填写："></a><strong>6.4  form表单填写：</strong></h5><p><img src="https://img-blog.csdnimg.cn/20200503123930786.png" alt></p><h5 id="6-5-输出结果："><a href="#6-5-输出结果：" class="headerlink" title="6.5 输出结果："></a><strong>6.5 输出结果：</strong></h5><pre class=" language-java"><code class="language-java">welcome <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>奥尼斯汀UserAccount<span class="token punctuation">{</span>username<span class="token operator">=</span><span class="token string">'奥尼斯汀'</span><span class="token punctuation">,</span> password<span class="token operator">=</span><span class="token string">'1024'</span><span class="token punctuation">,</span> money<span class="token operator">=</span>null<span class="token punctuation">}</span></code></pre><h3 id="7-SessionAttributes注解"><a href="#7-SessionAttributes注解" class="headerlink" title="7.  SessionAttributes注解"></a>7.  SessionAttributes注解</h3><ol><li>作用：用于多次执行控制器方法间的参数共享</li><li>属性：value：指定存入属性的名称</li></ol><h5 id="7-1-引导案例：创建TestSessionAttributes类"><a href="#7-1-引导案例：创建TestSessionAttributes类" class="headerlink" title="7.1 引导案例：创建TestSessionAttributes类"></a><strong>7.1 引导案例：创建TestSessionAttributes类</strong></h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token annotation punctuation">@SessionAttributes</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true">//将msg存入Session域中</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">TestSessionAttributes</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/setSessionAttribute"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true">//Model底层实现就是存入request域中</span>    <span class="token keyword">public</span> String <span class="token function">setSessionAttribute</span><span class="token punctuation">(</span>Model model<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"setSessionAttribute  ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>         model<span class="token punctuation">.</span><span class="token function">addAttribute</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">,</span><span class="token string">"美美"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="7-2-获取session"><a href="#7-2-获取session" class="headerlink" title="7.2 获取session"></a><strong>7.2 获取session</strong></h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/getSessionAttribute"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getSessionAttribute</span><span class="token punctuation">(</span>ModelMap modelmap<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"getSessionAttribute  ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        String msg <span class="token operator">=</span> <span class="token punctuation">(</span>String<span class="token punctuation">)</span> modelmap<span class="token punctuation">.</span><span class="token function">get</span><span class="token punctuation">(</span><span class="token string">"msg"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"msg : "</span> <span class="token operator">+</span> msg<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="7-3-删除Session域"><a href="#7-3-删除Session域" class="headerlink" title="7.3  删除Session域"></a><strong>7.3  删除Session域</strong></h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/delSessionAttribute"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">delSessionAttribute</span><span class="token punctuation">(</span>SessionStatus sessionStatus<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"delSessionAttribute  ..."</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        sessionStatus<span class="token punctuation">.</span><span class="token function">setComplete</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h5 id="7-4-jsp页面编写"><a href="#7-4-jsp页面编写" class="headerlink" title="7.4  jsp页面编写"></a><strong>7.4  jsp页面编写</strong></h5><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"setSessionAttribute"</span><span class="token operator">></span>setSessionAttribute<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"getSessionAttribute"</span><span class="token operator">></span>getSessionAttribute<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"delSessionAttribute"</span><span class="token operator">></span>delSessionAttribute<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></code></pre><h5 id="7-5-success界面编写（注意不要忽略isELIgnored-false）"><a href="#7-5-success界面编写（注意不要忽略isELIgnored-false）" class="headerlink" title="7.5 success界面编写（注意不要忽略isELIgnored=false）"></a><strong>7.5 success界面编写（注意不要忽略isELIgnored=false）</strong></h5><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">%</span>@ page contentType<span class="token operator">=</span><span class="token string">"text/html;charset=UTF-8"</span> language<span class="token operator">=</span><span class="token string">"java"</span> isELIgnored<span class="token operator">=</span><span class="token string">"false"</span> <span class="token operator">%</span><span class="token operator">></span><span class="token operator">&lt;</span>html<span class="token operator">></span><span class="token operator">&lt;</span>head<span class="token operator">></span>    <span class="token operator">&lt;</span>title<span class="token operator">></span>Title<span class="token operator">&lt;</span><span class="token operator">/</span>title<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>head<span class="token operator">></span><span class="token operator">&lt;</span>body<span class="token operator">></span><span class="token operator">&lt;</span>h1<span class="token operator">></span>Success<span class="token operator">&lt;</span><span class="token operator">/</span>h1<span class="token operator">></span>$<span class="token punctuation">{</span>msg<span class="token punctuation">}</span>$<span class="token punctuation">{</span>sessionScope<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>body<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>html<span class="token operator">></span></code></pre><h5 id="7-6-页面测试"><a href="#7-6-页面测试" class="headerlink" title="7.6 页面测试"></a><strong>7.6 页面测试</strong></h5><p><strong>7.6.1 点击setSessionAttribute</strong></p><p><img src="https://img-blog.csdnimg.cn/20200503130140652.png" alt></p><p><strong>7.6.2 点击getSessionAttribute</strong></p><p><img src="https://img-blog.csdnimg.cn/20200503130222695.png" alt></p><p><strong>7.6.3 点击delSessionAttribute</strong></p><p><img src="https://img-blog.csdnimg.cn/20200503130250476.png" alt><br><strong>这里还有个美美是因为request域中没有被清除，但是session域中已经被清楚了</strong></p><blockquote><p>这里就是常用的七大注解了，如有讲错的地方欢迎大家指正</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC 学习心得（三）</title>
      <link href="/2020/06/14/springmvc-3/"/>
      <url>/2020/06/14/springmvc-3/</url>
      
        <content type="html"><![CDATA[<p><strong>应用场景：我们在数据库中定义了出生日期字段类型为date，在浏览器中的form表单中填写数据，springmvc内置了十种过滤器模式，当你将日期写成xx/xx/xx格式可以被内置解析，但是xx-xx-xx这种格式会抛出 400 Bad Request请求异常，所以我们自定义过滤器配置使用</strong></p><h2 id="1-实现接口Converter-lt-S-T-gt"><a href="#1-实现接口Converter-lt-S-T-gt" class="headerlink" title="1.实现接口Converter&lt;S,T&gt;"></a>1.实现接口Converter&lt;S,T&gt;</h2><h5 id="1-1-创建StringDateFormat类"><a href="#1-1-创建StringDateFormat类" class="headerlink" title="1.1 创建StringDateFormat类"></a><strong>1.1 创建StringDateFormat类</strong></h5><pre class=" language-java"><code class="language-java">      <span class="token comment" spellcheck="true">/*       类型转换     */</span>    <span class="token keyword">public</span> Date <span class="token function">convert</span><span class="token punctuation">(</span>String s<span class="token punctuation">)</span> <span class="token punctuation">{</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>s <span class="token operator">==</span> null<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"参数不能为空"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>        <span class="token keyword">try</span> <span class="token punctuation">{</span>            <span class="token comment" spellcheck="true">// 解析字符串 Date date = df.parse(source); return date;</span>            DateFormat df <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">SimpleDateFormat</span><span class="token punctuation">(</span><span class="token string">"yyyy-MM-dd"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            Date date <span class="token operator">=</span> df<span class="token punctuation">.</span><span class="token function">parse</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> date<span class="token punctuation">;</span>        <span class="token punctuation">}</span> <span class="token keyword">catch</span> <span class="token punctuation">(</span><span class="token class-name">Exception</span> e<span class="token punctuation">)</span> <span class="token punctuation">{</span>            <span class="token keyword">throw</span> <span class="token keyword">new</span> <span class="token class-name">RuntimeException</span><span class="token punctuation">(</span><span class="token string">"类型转换错误"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token punctuation">}</span>    <span class="token punctuation">}</span></code></pre><h5 id="1-2-在springmvc配置文件中配置ConversionServiceFactoryBean工厂"><a href="#1-2-在springmvc配置文件中配置ConversionServiceFactoryBean工厂" class="headerlink" title="1.2 在springmvc配置文件中配置ConversionServiceFactoryBean工厂"></a><strong>1.2 在springmvc配置文件中配置ConversionServiceFactoryBean工厂</strong></h5><pre class=" language-java"><code class="language-java"> <span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.context.support.ConversionServiceFactoryBean"</span> id<span class="token operator">=</span><span class="token string">"conversionService"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"converters"</span><span class="token operator">></span>            <span class="token operator">&lt;</span>set<span class="token operator">></span>                <span class="token operator">&lt;</span>bean <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"cn.itcast.controller.StringDateFormate"</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>            <span class="token operator">&lt;</span><span class="token operator">/</span>set<span class="token operator">></span>        <span class="token operator">&lt;</span><span class="token operator">/</span>property<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span></code></pre><h5 id="1-3-模拟实体类"><a href="#1-3-模拟实体类" class="headerlink" title="1.3 模拟实体类"></a><strong>1.3 模拟实体类</strong></h5><pre class=" language-java"><code class="language-java"><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">UserAccount</span> <span class="token keyword">implements</span> <span class="token class-name">Serializable</span> <span class="token punctuation">{</span>    <span class="token keyword">private</span> Date date<span class="token punctuation">;</span>        <span class="token punctuation">(</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>省略toString <span class="token function">get</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token function">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">)</span><span class="token punctuation">}</span></code></pre><h5 id="1-4-在没添加之前输入xx-xx-xx发出错误请求界面："><a href="#1-4-在没添加之前输入xx-xx-xx发出错误请求界面：" class="headerlink" title="1.4 在没添加之前输入xx-xx-xx发出错误请求界面："></a><strong>1.4 在没添加之前输入xx-xx-xx发出错误请求界面：</strong></h5><p><img src="https://img-blog.csdnimg.cn/20200503105902135.png" alt><br><strong>2.编写Controller类</strong></p><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span><span class="token string">"/getDate"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">getDate</span><span class="token punctuation">(</span>UserAccount account<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"date : "</span> <span class="token operator">+</span> account<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><p><strong>2.1  输入xx-xx-xx日期类型，控制台输出结果为：</strong></p><pre class=" language-handlebars"><code class="language-handlebars">date : UserAccount{date=Tue Dec 11 00:00:00 CST 1212}</code></pre><h2 id="2-中文乱码问题解决"><a href="#2-中文乱码问题解决" class="headerlink" title="2.中文乱码问题解决"></a>2.中文乱码问题解决</h2><pre class=" language-java"><code class="language-java"> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置过滤器  <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span>filter<span class="token operator">></span>    <span class="token operator">&lt;</span>filter<span class="token operator">-</span>name<span class="token operator">></span>characterEncodingFilter<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>name<span class="token operator">></span>    <span class="token operator">&lt;</span>filter<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>filter<span class="token punctuation">.</span>CharacterEncodingFilter<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>    <span class="token operator">&lt;</span>init<span class="token operator">-</span>param<span class="token operator">></span>      <span class="token operator">&lt;</span>param<span class="token operator">-</span>name<span class="token operator">></span>encoding<span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>name<span class="token operator">></span>      <span class="token operator">&lt;</span>param<span class="token operator">-</span>value<span class="token operator">></span>UTF<span class="token operator">-</span><span class="token number">8</span><span class="token operator">&lt;</span><span class="token operator">/</span>param<span class="token operator">-</span>value<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>init<span class="token operator">-</span>param<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">></span>  <span class="token operator">&lt;</span>filter<span class="token operator">-</span>mapping<span class="token operator">></span>    <span class="token operator">&lt;</span>filter<span class="token operator">-</span>name<span class="token operator">></span>characterEncodingFilter<span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>name<span class="token operator">></span>    <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">></span><span class="token operator">/</span><span class="token operator">*</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">-</span>pattern<span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>filter<span class="token operator">-</span>mapping<span class="token operator">></span></code></pre><p><strong>好了，这就是简易自定义过滤器的使用了，有什么不同的见解可以一起探讨</strong></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC 学习心得（二）</title>
      <link href="/2020/06/14/springmvc-2/"/>
      <url>/2020/06/14/springmvc-2/</url>
      
        <content type="html"><![CDATA[<p><strong>在上一章节小编讲述了SpringMVC入门案例，通过配置 前端控制器 ， 视图解析器，初始化加载配置文件等等一系列步骤，下面小编继续讲解上章节的疑惑注解@RequestMapping</strong></p><h2 id="1-RequestMapping的几种形式"><a href="#1-RequestMapping的几种形式" class="headerlink" title="1 .@RequestMapping的几种形式"></a>1 .@RequestMapping的几种形式</h2><table><thead><tr><th>path</th><th>指定请求路径的url</th></tr></thead><tbody><tr><td>value</td><td>value属性和path属性是一样的</td></tr><tr><td>mthod</td><td>指定该方法的请求方式（如果接受不在定义范围内的请求会抛404）</td></tr><tr><td>params</td><td>指定限制请求参数的条件</td></tr><tr><td>headers</td><td>发送的请求中必须包含的请求头</td></tr></tbody></table><h4 id="1-1-path属性"><a href="#1-1-path属性" class="headerlink" title="1.1 path属性"></a><strong>1.1 path属性</strong></h4><pre class=" language-java"><code class="language-java">  <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/path"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">pathTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"path"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="1-2-value属性："><a href="#1-2-value属性：" class="headerlink" title="1.2  value属性："></a><strong>1.2  value属性：</strong></h4><pre class=" language-java"><code class="language-java">  <span class="token comment" spellcheck="true">// 2. value value属性和path属性是一样的</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/value"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">valueTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"value"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="1-3-method属性："><a href="#1-3-method属性：" class="headerlink" title="1.3  method属性："></a><strong>1.3  method属性：</strong></h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 3. method 指定该方法的请求方式</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span>  <span class="token string">"/method"</span> <span class="token punctuation">,</span> method <span class="token operator">=</span> <span class="token punctuation">{</span>RequestMethod<span class="token punctuation">.</span>GET <span class="token punctuation">}</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">methodTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"method"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>      <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="1-4-params属性："><a href="#1-4-params属性：" class="headerlink" title="1.4  params属性："></a><strong>1.4  params属性：</strong></h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">// 4. params 指定该方法的请求方式</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/params"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">paramsTest</span><span class="token punctuation">(</span>String name <span class="token punctuation">,</span> String password<span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"params"</span> <span class="token operator">+</span> name <span class="token operator">+</span> <span class="token string">":"</span> <span class="token operator">+</span> password<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><h4 id="1-5-headers属性："><a href="#1-5-headers属性：" class="headerlink" title="1.5  headers属性："></a><strong>1.5  headers属性：</strong></h4><pre class=" language-java"><code class="language-java"><span class="token comment" spellcheck="true">//  5. headers 发送的请求中必须包含的请求头</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>value <span class="token operator">=</span> <span class="token string">"/headers"</span> <span class="token punctuation">,</span> headers <span class="token operator">=</span> <span class="token string">"Accept"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">headersTest</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"headers"</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span></code></pre><pre class=" language-handlebars"><code class="language-handlebars">方法里面都是只是简单的输出了一句话，在失败的请求下，控制台是不会输出方法中的话的</code></pre><h4 id="1-6-创建index-jsp文件"><a href="#1-6-创建index-jsp文件" class="headerlink" title="1.6  创建index.jsp文件"></a><strong>1.6  创建index.jsp文件</strong></h4><pre class=" language-vbnet"><code class="language-vbnet"><a href="path">Path</a>//测试path值方法<a href="value">value</a>//测试value值方法<a href="method">method</a>//测试method方法<a href="params?name=Rocy&age=23">params</a> //测试携带参数方法<a href="headers">headers</a>//测试是否包含请求头方法</code></pre><h4 id="1-7-测试执行结果如下"><a href="#1-7-测试执行结果如下" class="headerlink" title="1.7  测试执行结果如下"></a><strong>1.7  测试执行结果如下</strong></h4><pre class=" language-vbnet"><code class="language-vbnet">pathvaluemethodparams Rocy:23headers</code></pre><p><strong>这里有很多地方需要注意：<br>1.method属性定义的（小编仅仅定义了method = {RequestMethod.GET },这里是标明除了GET请求可以被请求成功之外，其他的请求都会抛出400Bad Request错误声明，导致请求失败，不会进入方法，更不会输出方法中的内容）<br>2.param属性定义的形参也是要和携带的参数一一对应的，如果形参与携带的参数不对应，那么值就不能自动封装上，便会出现null值打印的情况<br>3.headers属性：如果不包含头信息也会抛出400异常错误</strong></p><p><strong>好了，这里就是SpringMVC的RequestMapping注解的属性使用了</strong></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC 学习心得（一）</title>
      <link href="/2020/06/14/springmvc-8/"/>
      <url>/2020/06/14/springmvc-8/</url>
      
        <content type="html"><![CDATA[<p><strong>在小编总结完Spring的学习笔记之后，紧接着更新SpringMVC的学习笔记，也正是因为SpringMVC是基于Spring的，在整理Spring学习心得的过程中，有很多半懵半懂的地方在整理的过程中慢慢理解，慢慢强化自己的知识点，也是小编在不断测试中不断尝试才整理出来的一套Spring学习心得（这里确实用了很久很久的时间），现在虽然小编对于SpringMVC还有些许地方不太懂，但是希望在自己整理的过程中，通过自己的不断尝试测试，整理出正确的一套SpringMVC知识点</strong></p><h2 id="1-三层架构和MVC"><a href="#1-三层架构和MVC" class="headerlink" title="1.三层架构和MVC"></a>1.三层架构和MVC</h2><h5 id="1-1-三层架构"><a href="#1-1-三层架构" class="headerlink" title="1. 1 三层架构"></a><strong>1. 1 三层架构</strong></h5><pre class=" language-swift"><code class="language-swift"><span class="token number">1</span><span class="token punctuation">.</span> 咱们开发服务器端程序，一般都基于两种形式，一种C<span class="token operator">/</span><span class="token builtin">S架构程序，一种B</span><span class="token operator">/</span>S架构程序<span class="token number">2</span><span class="token punctuation">.</span> 使用<span class="token builtin">Java语言基本上都是开发B</span><span class="token operator">/</span><span class="token builtin">S架构的程序，B</span><span class="token operator">/</span>S架构又分成了三层架构<span class="token number">3</span><span class="token punctuation">.</span> 三层架构    <span class="token number">1</span><span class="token punctuation">.</span> 表现层：<span class="token constant">WEB</span>层，用来和客户端进行数据交互的。表现层一般会采用<span class="token constant">MVC</span>的设计模型    <span class="token number">2</span><span class="token punctuation">.</span> 业务层：处理公司具体的业务逻辑的    <span class="token number">3</span><span class="token punctuation">.</span> 持久层：用来操作数据库的</code></pre><h5 id="1-2-MVC模型"><a href="#1-2-MVC模型" class="headerlink" title="1.2 MVC模型"></a><strong>1.2 MVC模型</strong></h5><pre class=" language-swift"><code class="language-swift"><span class="token number">1</span><span class="token punctuation">.</span> <span class="token constant">MVC</span>全名是<span class="token builtin">Model</span> <span class="token builtin">View</span> <span class="token builtin">Controller</span> 模型视图控制器，每个部分各司其职。<span class="token number">2</span><span class="token punctuation">.</span> <span class="token builtin">Model：数据模型，JavaBean</span>的类，用来进行数据封装。<span class="token number">3</span><span class="token punctuation">.</span> <span class="token builtin">View</span>：指<span class="token constant">JSP</span>、<span class="token constant">HTML</span>用来展示数据给用户<span class="token number">4</span><span class="token punctuation">.</span> <span class="token builtin">Controller</span>：用来接收用户的请求，整个流程的控制器。用来进行数据校验等。</code></pre><h2 id="2-SpringMVC环境搭建"><a href="#2-SpringMVC环境搭建" class="headerlink" title="2.SpringMVC环境搭建"></a>2.SpringMVC环境搭建</h2><h5 id="2-1-SpringMVC是什么？"><a href="#2-1-SpringMVC是什么？" class="headerlink" title="2.1  SpringMVC是什么？"></a><strong>2.1  SpringMVC是什么？</strong></h5><pre class=" language-swift"><code class="language-swift"><span class="token number">1</span><span class="token punctuation">.</span> <span class="token builtin">SpringMVC</span>的概述<span class="token number">1</span><span class="token punctuation">.</span> 是一种基于<span class="token builtin">Java</span>实现的<span class="token constant">MVC</span>设计模型的请求驱动类型的轻量级<span class="token constant">WEB</span>框架。<span class="token number">2</span><span class="token punctuation">.</span> <span class="token builtin">Spring</span> <span class="token constant">MVC</span>属于<span class="token builtin">SpringFrameWork的后续产品，已经融合在Spring</span> <span class="token builtin">Web</span> <span class="token builtin">Flow里面。Spring</span> 框架提供了构建 <span class="token builtin">Web</span> 应用程序的全功能 <span class="token constant">MVC</span> 模块。<span class="token number">3</span><span class="token punctuation">.</span> 使用 <span class="token builtin">Spring</span> 可插入的 <span class="token constant">MVC</span> 架构，从而在使用<span class="token builtin">Spring</span>进行<span class="token constant">WEB</span>开发时，可以选择使用<span class="token builtin">Spring</span>的<span class="token builtin">SpringMVC</span>框架或集成其他<span class="token constant">MVC</span>开发框架，如<span class="token function">Struts1</span><span class="token punctuation">(</span>现在一般不用<span class="token punctuation">)</span>，<span class="token builtin">Struts2</span>等。<span class="token number">2</span><span class="token punctuation">.</span> <span class="token builtin">SpringMVC</span>在三层架构中的位置<span class="token number">1</span><span class="token punctuation">.</span> 表现层框架<span class="token number">3</span><span class="token punctuation">.</span> <span class="token builtin">SpringMVC</span>的优势<span class="token number">4</span><span class="token punctuation">.</span> <span class="token builtin">SpringMVC和Struts2</span>框架的对比</code></pre><h5 id="2-2-SpringMVC坐标库"><a href="#2-2-SpringMVC坐标库" class="headerlink" title="2.2  SpringMVC坐标库"></a><strong>2.2  SpringMVC坐标库</strong></h5><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>context<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>spring<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>web<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>spring<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>spring<span class="token operator">-</span>webmvc<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span>$<span class="token punctuation">{</span>spring<span class="token punctuation">.</span>version<span class="token punctuation">}</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span> <span class="token operator">&lt;</span>groupId<span class="token operator">></span>javax<span class="token punctuation">.</span>servlet<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>servlet<span class="token operator">-</span>api<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.5</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>      <span class="token operator">&lt;</span>scope<span class="token operator">></span>provided<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span>    <span class="token operator">&lt;</span>dependency<span class="token operator">></span>      <span class="token operator">&lt;</span>groupId<span class="token operator">></span>javax<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>jsp<span class="token operator">&lt;</span><span class="token operator">/</span>groupId<span class="token operator">></span>      <span class="token operator">&lt;</span>artifactId<span class="token operator">></span>jsp<span class="token operator">-</span>api<span class="token operator">&lt;</span><span class="token operator">/</span>artifactId<span class="token operator">></span>      <span class="token operator">&lt;</span>version<span class="token operator">></span><span class="token number">2.0</span><span class="token operator">&lt;</span><span class="token operator">/</span>version<span class="token operator">></span>      <span class="token operator">&lt;</span>scope<span class="token operator">></span>provided<span class="token operator">&lt;</span><span class="token operator">/</span>scope<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>dependency<span class="token operator">></span></code></pre><h5 id="2-3-在web-xml配置文件中配置前端控制器（DispatcherServlet）"><a href="#2-3-在web-xml配置文件中配置前端控制器（DispatcherServlet）" class="headerlink" title="2.3  在web.xml配置文件中配置前端控制器（DispatcherServlet）"></a><strong>2.3  在web.xml配置文件中配置前端控制器（DispatcherServlet）</strong></h5><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>servlet<span class="token operator">></span>    <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>dispatcherServlet<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>    <span class="token operator">&lt;</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>org<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>web<span class="token punctuation">.</span>servlet<span class="token punctuation">.</span>DispatcherServlet<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span><span class="token keyword">class</span><span class="token operator">></span>  <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>mapping<span class="token operator">></span>    <span class="token operator">&lt;</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>dispatcherServlet<span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>name<span class="token operator">></span>    <span class="token operator">&lt;</span>url<span class="token operator">-</span>pattern<span class="token operator">></span><span class="token operator">/</span><span class="token operator">&lt;</span><span class="token operator">/</span>url<span class="token operator">-</span>pattern<span class="token operator">></span> <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置拦截路径 <span class="token operator">--</span><span class="token operator">></span>  <span class="token operator">&lt;</span><span class="token operator">/</span>servlet<span class="token operator">-</span>mapping<span class="token operator">></span></code></pre><h5 id="2-4-在资源文件下（resources）创建springmvc-xml"><a href="#2-4-在资源文件下（resources）创建springmvc-xml" class="headerlink" title="2.4  在资源文件下（resources）创建springmvc.xml"></a><strong>2.4  在资源文件下（resources）创建springmvc.xml</strong></h5><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span><span class="token operator">?</span>xml version<span class="token operator">=</span><span class="token string">"1.0"</span> encoding<span class="token operator">=</span><span class="token string">"UTF-8"</span><span class="token operator">?</span><span class="token operator">></span><span class="token operator">&lt;</span>beans xmlns<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/beans"</span>       xmlns<span class="token operator">:</span>mvc<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/mvc"</span>       xmlns<span class="token operator">:</span>context<span class="token operator">=</span><span class="token string">"http://www.springframework.org/schema/context"</span>       xmlns<span class="token operator">:</span>xsi<span class="token operator">=</span><span class="token string">"http://www.w3.org/2001/XMLSchema-instance"</span>       xsi<span class="token operator">:</span>schemaLocation<span class="token operator">=</span>" http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>beans<span class="token operator">/</span>spring<span class="token operator">-</span>beans<span class="token punctuation">.</span>xsd        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>mvc        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>mvc<span class="token operator">/</span>spring<span class="token operator">-</span>mvc<span class="token punctuation">.</span>xsd        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context        http<span class="token operator">:</span><span class="token operator">/</span><span class="token operator">/</span>www<span class="token punctuation">.</span>springframework<span class="token punctuation">.</span>org<span class="token operator">/</span>schema<span class="token operator">/</span>context<span class="token operator">/</span>spring<span class="token operator">-</span>context<span class="token punctuation">.</span>xsd"<span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 扫描包 <span class="token operator">--</span><span class="token operator">></span><span class="token operator">&lt;</span>context<span class="token operator">:</span>component<span class="token operator">-</span>scan base<span class="token operator">-</span><span class="token keyword">package</span><span class="token operator">=</span><span class="token string">"cn.itcast.controller"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 配置视图解析器 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>bean id<span class="token operator">=</span><span class="token string">"internalResourceViewResolver"</span> <span class="token keyword">class</span><span class="token operator">=</span><span class="token string">"org.springframework.web.servlet.view.InternalResourceViewResolver"</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"prefix"</span> value<span class="token operator">=</span><span class="token string">"/WEB-INF/pages/"</span><span class="token operator">/</span><span class="token operator">></span>        <span class="token operator">&lt;</span>property name<span class="token operator">=</span><span class="token string">"suffix"</span> value<span class="token operator">=</span><span class="token string">".jsp"</span><span class="token operator">/</span><span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">/</span>bean<span class="token operator">></span>    <span class="token operator">&lt;</span><span class="token operator">!</span><span class="token operator">--</span> 开启配置器 <span class="token operator">--</span><span class="token operator">></span>    <span class="token operator">&lt;</span>mvc<span class="token operator">:</span>annotation<span class="token operator">-</span>driven<span class="token operator">/</span><span class="token operator">></span><span class="token operator">&lt;</span><span class="token operator">/</span>beans<span class="token operator">></span></code></pre><h5 id="2-5-创建HelloControllerDemo-类（Controller）"><a href="#2-5-创建HelloControllerDemo-类（Controller）" class="headerlink" title="2.5  创建HelloControllerDemo 类（Controller）"></a><strong>2.5  创建HelloControllerDemo 类（Controller）</strong></h5><pre class=" language-java"><code class="language-java"><span class="token annotation punctuation">@Controller</span><span class="token keyword">public</span> <span class="token keyword">class</span> <span class="token class-name">HelloControllerDemo</span> <span class="token punctuation">{</span>    <span class="token annotation punctuation">@RequestMapping</span><span class="token punctuation">(</span>path <span class="token operator">=</span> <span class="token string">"/hello"</span><span class="token punctuation">)</span>    <span class="token keyword">public</span> String <span class="token function">sayHello</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">{</span>        System<span class="token punctuation">.</span>out<span class="token punctuation">.</span><span class="token function">println</span><span class="token punctuation">(</span><span class="token string">"Welcome springmvc ... "</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> <span class="token string">"success"</span><span class="token punctuation">;</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span></code></pre><h5 id="2-6-在index-jsp中配置一个超链接，用来测试SpringMVC环境配置是否成功"><a href="#2-6-在index-jsp中配置一个超链接，用来测试SpringMVC环境配置是否成功" class="headerlink" title="2.6 在index.jsp中配置一个超链接，用来测试SpringMVC环境配置是否成功"></a><strong>2.6 在index.jsp中配置一个超链接，用来测试SpringMVC环境配置是否成功</strong></h5><pre class=" language-java"><code class="language-java"><span class="token operator">&lt;</span>a href<span class="token operator">=</span><span class="token string">"hello"</span><span class="token operator">></span>入门开始<span class="token operator">&lt;</span><span class="token operator">/</span>a<span class="token operator">></span></code></pre><p><strong>注意：这里先选择性忽略部分注解的属性，先了解如何入门即可，在之后小编会做出注解的使用以及解释，这里主要是搭建环境测试是否入门</strong></p><h5 id="2-6-1-在WEB-INF下创建pages文件夹，在pages文件夹中创建success-jsp文件"><a href="#2-6-1-在WEB-INF下创建pages文件夹，在pages文件夹中创建success-jsp文件" class="headerlink" title="2.6.1  在WEB-INF下创建pages文件夹，在pages文件夹中创建success.jsp文件"></a><strong>2.6.1  在WEB-INF下创建pages文件夹，在pages文件夹中创建success.jsp文件</strong></h5><p><img src="https://img-blog.csdnimg.cn/20200428140804739.png" alt="在这里插入图片描述"></p><h5 id="2-7-配置Tomcat-这里小编以图文形式来讲解"><a href="#2-7-配置Tomcat-这里小编以图文形式来讲解" class="headerlink" title="2.7 配置Tomcat,这里小编以图文形式来讲解"></a><strong>2.7 配置Tomcat,这里小编以图文形式来讲解</strong></h5><p><img src="https://img-blog.csdnimg.cn/20200428130742265.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQwOTk5NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="2-7-1-创建Local-Tomcat"><a href="#2-7-1-创建Local-Tomcat" class="headerlink" title="2.7.1  创建Local Tomcat"></a><strong>2.7.1  创建Local Tomcat</strong></h5><p><img src="https://img-blog.csdnimg.cn/20200428131037967.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQwOTk5NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>2.7.2  创建环境部署</strong><img src="https://img-blog.csdnimg.cn/20200428131222999.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQwOTk5NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="2-7-3-添加项目部署"><a href="#2-7-3-添加项目部署" class="headerlink" title="2.7.3  添加项目部署"></a><strong>2.7.3  添加项目部署</strong></h5><p><img src="https://img-blog.csdnimg.cn/20200428131312749.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQwOTk5NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="2-7-4-设置虚拟路径"><a href="#2-7-4-设置虚拟路径" class="headerlink" title="2.7.4  设置虚拟路径"></a><strong>2.7.4  设置虚拟路径</strong></h5><p><img src="https://img-blog.csdnimg.cn/20200428131413663.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQwOTk5NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><h5 id="2-8-启动服务器-进行测试"><a href="#2-8-启动服务器-进行测试" class="headerlink" title="2.8  启动服务器,进行测试"></a><strong>2.8  启动服务器,进行测试</strong></h5><p><img src="https://img-blog.csdnimg.cn/20200428140418586.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQwOTk5NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><pre class=" language-handlebars"><code class="language-handlebars">控制台输出：Welcome springmvc ... </code></pre><p><strong>最后跳转到界面：</strong></p><p><img src="https://img-blog.csdnimg.cn/20200428140529937.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQwOTk5NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><p><strong>好了，这里就是SpringMVC的入门架构了</strong></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SpringMVC 学习心得（八）</title>
      <link href="/2020/06/11/springmvc-1/"/>
      <url>/2020/06/11/springmvc-1/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringMVC-学习心得-（八）"><a href="#SpringMVC-学习心得-（八）" class="headerlink" title="SpringMVC 学习心得 （八）"></a>SpringMVC 学习心得 （八）</h2><p><strong>异常流程处理过程，出现异常之后都会默认向上抛出异常直到有人处理，如果整个过程中一直没有人去处理，那么将会将异常抛给浏览器（也就是用户），这样对用户的体验是非常不友好的，所以我们应该要手动去处理这些异常，以展示友好界面</strong></p><p><img src="https://img-blog.csdnimg.cn/2020052817052197.png" alt></p><h3 id="1-、自定义异常处理器"><a href="#1-、自定义异常处理器" class="headerlink" title="1)、自定义异常处理器"></a>1)、自定义异常处理器</h3><h5 id="1-自定义异常SysException类"><a href="#1-自定义异常SysException类" class="headerlink" title="1).自定义异常SysException类"></a>1).自定义异常SysException类</h5><blockquote><p>public class SysException extends Exception {<br>    private String msg;</p><p>public SysException(String msg) {<br>    this.msg = msg;<br>}</p><p>public String getMsg() {<br>    return msg;<br>}</p><p>public void setMsg(String msg) {<br>    this.msg = msg;<br>}</p><p>}</p></blockquote><h5 id="2-实现HandlerExceptionResolver"><a href="#2-实现HandlerExceptionResolver" class="headerlink" title="2).实现HandlerExceptionResolver"></a>2).实现HandlerExceptionResolver</h5><blockquote><p>public class SysExceptionResolver implements HandlerExceptionResolver {</p><p>@Override<br>public ModelAndView resolveException(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e) {<br>    //controller 抛出的异常对象Exception ex<br>        SysException sys = null;<br>    if(e instanceof SysException){<br>        sys = (SysException) e;<br>    }else{<br>    //如果没有就抛出异常<br>        sys = new SysException(“服务器异常”);<br>    }<br>    //创建modelAndView对象<br>    ModelAndView modelAndView = new ModelAndView();<br>    modelAndView.addObject(“msg”,sys.getMsg());<br>    //选择异常跳转视图<br>    modelAndView.setViewName(“error”);<br>    return modelAndView;<br>}</p><p>}</p></blockquote><h5 id="3-、配置异常处理器"><a href="#3-、配置异常处理器" class="headerlink" title="3)、配置异常处理器"></a>3)、配置异常处理器</h5><blockquote><p> &lt; bean id=”sysExceptionResolver” class=”cn.itcast.exception.SysExceptionResolver” /&gt;</p></blockquote><h3 id="2-、拦截器（Interceptor）"><a href="#2-、拦截器（Interceptor）" class="headerlink" title="2)、拦截器（Interceptor）"></a>2)、拦截器（Interceptor）</h3><h5 id="1-拦截器和过滤器的区别？"><a href="#1-拦截器和过滤器的区别？" class="headerlink" title="1).拦截器和过滤器的区别？"></a>1).拦截器和过滤器的区别？</h5><blockquote><ol><li>过滤器是Servlet规范的一部分，任何框架都可以使用过滤器技术</li><li>拦截器是<strong>SpringMVC框架独有的</strong></li><li>过滤器配置了/*，可以拦截任何资源。</li><li>拦截器只会对<strong>控制器中的方法</strong>进行拦截</li></ol></blockquote><h5 id="2-自定义拦截器步骤"><a href="#2-自定义拦截器步骤" class="headerlink" title="2).自定义拦截器步骤"></a>2).自定义拦截器步骤</h5><p><strong>1.实现HandlerInterceptor接口，重写public boolean preHandle（）方法</strong></p><blockquote><p>public class MyInteceptorHandler implements HandlerInterceptor {<br>    //最先被执行，在controller之前<br>    @Override<br>    public boolean preHandle(HttpServletRequest request, HttpServletResponse response, Object handler) throws Exception {<br>        System.out.println(“拦截器开始执行咯。。”);<br>        return true;<br>    }<br>//在controller执行之后再执行<br>    @Override<br>    public void postHandle(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView) throws Exception {<br>        System.out.println(“posthandle…”);<br>        //这里实现页面转发，跳到index.jsp页面中<br>        request.getRequestDispatcher(“/index.jsp”).forward(request,re    sponse);<br>        System.out.println(“拦截器执行完咯。。”);</p><p>}</p><p>//在之后执行的方法<br>    @Override<br>    public void afterCompletion(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex) throws Exception {<br>        System.out.println(“拦截器执行完之后咯。。”);<br>    }<br>}</p></blockquote><p><strong>2.配置springmvc配置文件注册拦截器作用范围</strong></p><blockquote><p>  <a href="mvc:interceptors">mvc:interceptors</a><br>        <a href="mvc:interceptor">mvc:interceptor</a><br>            <!-- 设置哪些路径被拦截 --><br>            &lt;mvc:mapping path=”/hello”/&gt;<br>            <!-- 设置哪些路径不被拦截 --><br>            &lt;mvc:exclude-mapping path=”/“/&gt;<br>            <bean id="myInteceptorHandler" class="cn.itcast.controller.MyInteceptorHandler"><br>        <br>    </bean></p></blockquote><p><strong>3.controller跳转到success.jsp界面</strong></p><blockquote><p>@RequestMapping(“/hello”)<br>    public String hello(){<br>        System.out.println(“hello方法。。。”);<br>        return “success”;<br>    }</p></blockquote><p><strong>注意：小编在index.jsp和success.jsp中都输出了一句话以证明拦截器的执行流程</strong></p><h5 id="3-拦截器执行过程"><a href="#3-拦截器执行过程" class="headerlink" title="3).拦截器执行过程"></a>3).拦截器执行过程</h5><p><img src="https://img-blog.csdnimg.cn/20200528194212163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQwOTk5NA==,size_16,color_FFFFFF,t_70" alt><br><strong>控制台打印，首先走的是preHandle方法，其次就是controller,然后走的postHandle方法，再走的controller的视图解析器，最后走的afterHandle方法</strong></p><p><img src="https://img-blog.csdnimg.cn/20200528195846130.png" alt><br><strong>注意：最后显示的视图是index.jsp视图，原因是 如果postHandler中指定了跳转的页面，那么controller方法跳转的页面将不会显示，所以最终显示的是index.jsp界面</strong><br><img src="https://img-blog.csdnimg.cn/20200528200159121.png" alt="在这里插入图片描述"></p><h5 id="4-单个拦截器使用总结"><a href="#4-单个拦截器使用总结" class="headerlink" title="4).单个拦截器使用总结"></a>4).单个拦截器使用总结</h5><blockquote><ol><li>preHandle方法是controller方法执行前拦截的方法<ol><li>可以使用request或者response跳转到指定的页面</li><li>return true放行，执行下一个拦截器，如果没有拦截器，执行controller中的方法。</li><li>return false不放行，不会执行controller中的方法。</li></ol></li><li>postHandle是controller方法执行后执行的方法，在JSP视图执行前。<ol><li>可以使用request或者response跳转到指定的页面</li><li>如果指定了跳转的页面，那么controller方法跳转的页面将不会显示。</li></ol></li><li>postHandle方法是在JSP执行后执行<ol><li>request或者response不能再跳转页面了</li></ol></li></ol></blockquote><h3 id="3-、多个拦截器定义的使用"><a href="#3-、多个拦截器定义的使用" class="headerlink" title="3)、多个拦截器定义的使用"></a>3)、多个拦截器定义的使用</h3><h5 id="1-执行顺序？"><a href="#1-执行顺序？" class="headerlink" title="1).执行顺序？"></a>1).执行顺序？</h5><p><strong>a).多个拦截器全部都放行的执行顺序：</strong><br><img src="https://img-blog.csdnimg.cn/20200528204821734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQwOTk5NA==,size_16,color_FFFFFF,t_70" alt></p><blockquote><p>拦截器111开始执行咯。。<br>拦截器2开始执行咯。。<br>hello方法。。。<br>拦截器执2行完咯。。<br>拦截器执2行完之后咯。。<br>拦截器111执行完之后咯。。</p></blockquote><p><strong>b).多个拦截器后者不放行的执行顺序：</strong></p><p><img src="https://img-blog.csdnimg.cn/20200528205907818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQwOTk5NA==,size_16,color_FFFFFF,t_70" alt></p><blockquote><p>控制台打印：<br>拦截器111开始执行咯。。<br>拦截器2开始执行咯。。<br>拦截器111执行完之后咯。。</p></blockquote><p><strong>这里小编对没有页面显示也还有些疑问，显示的是空白页面，在不断的学习和探索之后再进行回更，多拦截器执行原理！</strong></p>]]></content>
      
      
      <categories>
          
          <category> Spring </category>
          
          <category> SpringMVC </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Spring </tag>
            
            <tag> SpringMVC </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
