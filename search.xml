<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>typora-vue-theme Theme introduction</title>
      <link href="/2018/09/07/thrid-post-artical/"/>
      <url>/2018/09/07/thrid-post-artical/</url>
      
        <content type="html"><![CDATA[<h2 id="SpringMVC-学习心得-（八）"><a href="#SpringMVC-学习心得-（八）" class="headerlink" title="SpringMVC 学习心得 （八）"></a>SpringMVC 学习心得 （八）</h2><p><strong>异常流程处理过程，出现异常之后都会默认向上抛出异常直到有人处理，如果整个过程中一直没有人去处理，那么将会将异常抛给浏览器（也就是用户），这样对用户的体验是非常不友好的，所以我们应该要手动去处理这些异常，以展示友好界面</strong></p><p><img src="https://img-blog.csdnimg.cn/2020052817052197.png" alt></p><h3 id="1-、自定义异常处理器"><a href="#1-、自定义异常处理器" class="headerlink" title="1)、自定义异常处理器"></a>1)、自定义异常处理器</h3><h5 id="1-自定义异常SysException类"><a href="#1-自定义异常SysException类" class="headerlink" title="1).自定义异常SysException类"></a>1).自定义异常SysException类</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysException</span> <span class="keyword">extends</span> <span class="title">Exception</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> String msg;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="title">SysException</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">getMsg</span><span class="params">()</span> </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> msg;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMsg</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">        <span class="keyword">this</span>.msg = msg;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="2-实现HandlerExceptionResolver"><a href="#2-实现HandlerExceptionResolver" class="headerlink" title="2).实现HandlerExceptionResolver"></a>2).实现HandlerExceptionResolver</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SysExceptionResolver</span> <span class="keyword">implements</span> <span class="title">HandlerExceptionResolver</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> ModelAndView <span class="title">resolveException</span><span class="params">(HttpServletRequest httpServletRequest, HttpServletResponse httpServletResponse, Object o, Exception e)</span> </span>&#123;</span><br><span class="line">        <span class="comment">//controller 抛出的异常对象Exception ex</span></span><br><span class="line">            SysException sys = <span class="keyword">null</span>;</span><br><span class="line">        <span class="keyword">if</span>(e <span class="keyword">instanceof</span> SysException)&#123;</span><br><span class="line">            sys = (SysException) e;</span><br><span class="line">        &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="comment">//如果没有就抛出异常</span></span><br><span class="line">            sys = <span class="keyword">new</span> SysException(<span class="string">"服务器异常"</span>);</span><br><span class="line">        &#125;</span><br><span class="line"><span class="comment">//创建modelAndView对象</span></span><br><span class="line">        ModelAndView modelAndView = <span class="keyword">new</span> ModelAndView();</span><br><span class="line">        modelAndView.addObject(<span class="string">"msg"</span>,sys.getMsg());</span><br><span class="line">        <span class="comment">//选择异常跳转视图</span></span><br><span class="line">        modelAndView.setViewName(<span class="string">"error"</span>);</span><br><span class="line">        <span class="keyword">return</span> modelAndView;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h5 id="3-、配置异常处理器"><a href="#3-、配置异常处理器" class="headerlink" title="3)、配置异常处理器"></a>3)、配置异常处理器</h5><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;bean id=<span class="string">"sysExceptionResolver"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.itcast.exception.SysExceptionResolver"</span>/&gt;</span><br></pre></td></tr></table></figure><h3 id="2-、拦截器（Interceptor）"><a href="#2-、拦截器（Interceptor）" class="headerlink" title="2)、拦截器（Interceptor）"></a>2)、拦截器（Interceptor）</h3><h5 id="1-拦截器和过滤器的区别？"><a href="#1-拦截器和过滤器的区别？" class="headerlink" title="1).拦截器和过滤器的区别？"></a>1).拦截器和过滤器的区别？</h5><blockquote><ol><li>过滤器是Servlet规范的一部分，任何框架都可以使用过滤器技术</li><li>拦截器是<strong>SpringMVC框架独有的</strong></li><li>过滤器配置了/*，可以拦截任何资源。</li><li>拦截器只会对<strong>控制器中的方法</strong>进行拦截</li></ol></blockquote><h5 id="2-自定义拦截器步骤"><a href="#2-自定义拦截器步骤" class="headerlink" title="2).自定义拦截器步骤"></a>2).自定义拦截器步骤</h5><blockquote><p>1.实现HandlerInterceptor接口，重写public boolean preHandle（）方法</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyInteceptorHandler</span> <span class="keyword">implements</span> <span class="title">HandlerInterceptor</span> </span>&#123;</span><br><span class="line"><span class="comment">//最先被执行，在controller之前</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">preHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"拦截器开始执行咯。。"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//在controller执行之后再执行</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">postHandle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, ModelAndView modelAndView)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"posthandle..."</span>);</span><br><span class="line">        <span class="comment">//这里实现页面转发，跳到index.jsp页面中</span></span><br><span class="line">        request.getRequestDispatcher(<span class="string">"/index.jsp"</span>).forward(request,response);</span><br><span class="line">        System.out.println(<span class="string">"拦截器执行完咯。。"</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//在之后执行的方法</span></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">afterCompletion</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler, Exception ex)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"拦截器执行完之后咯。。"</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><blockquote><p>2.配置springmvc配置文件注册拦截器作用范围</p></blockquote><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&lt;mvc:interceptors&gt;</span><br><span class="line">      &lt;mvc:interceptor&gt;</span><br><span class="line">          &lt;!-- 设置哪些路径被拦截 --&gt;</span><br><span class="line">          &lt;mvc:mapping path=<span class="string">"/hello"</span>/&gt;</span><br><span class="line">          &lt;!-- 设置哪些路径不被拦截 --&gt;</span><br><span class="line">          &lt;mvc:exclude-mapping path=<span class="string">"/"</span>/&gt;</span><br><span class="line">          &lt;bean id=<span class="string">"myInteceptorHandler"</span> <span class="class"><span class="keyword">class</span></span>=<span class="string">"cn.itcast.controller.MyInteceptorHandler"</span>/&gt;</span><br><span class="line">      &lt;/mvc:interceptor&gt;</span><br><span class="line">  &lt;/mvc:interceptors&gt;</span><br></pre></td></tr></table></figure><blockquote><p>3.controller跳转到success.jsp界面</p></blockquote><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line">    <span class="function"><span class="keyword">public</span> String <span class="title">hello</span><span class="params">()</span></span>&#123;</span><br><span class="line">        System.out.println(<span class="string">"hello方法。。。"</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="string">"success"</span>;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p><strong>注意：小编在index.jsp和success.jsp中都输出了一句话以证明拦截器的执行流程</strong></p><h5 id="3-拦截器执行过程"><a href="#3-拦截器执行过程" class="headerlink" title="3).拦截器执行过程"></a>3).拦截器执行过程</h5><p><img src="https://img-blog.csdnimg.cn/20200528194212163.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQwOTk5NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"><br><strong>控制台打印，首先走的是preHandle方法，其次就是controller,然后走的postHandle方法，再走的controller的视图解析器，最后走的afterHandle方法</strong></p><p><img src="https://img-blog.csdnimg.cn/20200528195846130.png" alt="在这里插入图片描述"><br><strong>注意：最后显示的视图是index.jsp视图，原因是 如果postHandler中指定了跳转的页面，那么controller方法跳转的页面将不会显示，所以最终显示的是index.jsp界面</strong><br><img src="https://img-blog.csdnimg.cn/20200528200159121.png" alt="在这里插入图片描述"></p><h5 id="4-单个拦截器使用总结"><a href="#4-单个拦截器使用总结" class="headerlink" title="4).单个拦截器使用总结"></a>4).单个拦截器使用总结</h5><blockquote><ol><li>preHandle方法是controller方法执行前拦截的方法<ol><li>可以使用request或者response跳转到指定的页面</li><li>return true放行，执行下一个拦截器，如果没有拦截器，执行controller中的方法。</li><li>return false不放行，不会执行controller中的方法。</li></ol></li><li>postHandle是controller方法执行后执行的方法，在JSP视图执行前。<ol><li>可以使用request或者response跳转到指定的页面</li><li>如果指定了跳转的页面，那么controller方法跳转的页面将不会显示。</li></ol></li><li>postHandle方法是在JSP执行后执行<ol><li>request或者response不能再跳转页面了</li></ol></li></ol></blockquote><h3 id="3-、多个拦截器定义的使用"><a href="#3-、多个拦截器定义的使用" class="headerlink" title="3)、多个拦截器定义的使用"></a>3)、多个拦截器定义的使用</h3><h5 id="1-执行顺序？"><a href="#1-执行顺序？" class="headerlink" title="1).执行顺序？"></a>1).执行顺序？</h5><p><strong>a).多个拦截器全部都放行的执行顺序：</strong><br><img src="https://img-blog.csdnimg.cn/20200528204821734.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQwOTk5NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">拦截器111开始执行咯。。</span></span><br><span class="line"><span class="xml">拦截器2开始执行咯。。</span></span><br><span class="line"><span class="xml">hello方法。。。</span></span><br><span class="line"><span class="xml">拦截器执2行完咯。。</span></span><br><span class="line"><span class="xml">拦截器执2行完之后咯。。</span></span><br><span class="line"><span class="xml">拦截器111执行完之后咯。。</span></span><br></pre></td></tr></table></figure><p><strong>b).多个拦截器后者不放行的执行顺序：</strong></p><p><img src="https://img-blog.csdnimg.cn/20200528205907818.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80MzQwOTk5NA==,size_16,color_FFFFFF,t_70" alt="在这里插入图片描述"></p><figure class="highlight handlebars"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml">控制台打印：</span></span><br><span class="line"><span class="xml">拦截器111开始执行咯。。</span></span><br><span class="line"><span class="xml">拦截器2开始执行咯。。</span></span><br><span class="line"><span class="xml">拦截器111执行完之后咯。。</span></span><br></pre></td></tr></table></figure><p><strong>这里小编对没有页面显示也还有些疑问，显示的是空白页面，在不断的学习和探索之后再进行回更，多拦截器执行原理！</strong></p>]]></content>
      
      
      <categories>
          
          <category> Markdown </category>
          
          <category> SpringBoot </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Typora </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
